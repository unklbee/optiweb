# Generated by Django 4.2.21 on 2025-06-01 07:37

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import meta.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContactSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('inquiry_type', models.CharField(choices=[('service', 'Service Inquiry'), ('quote', 'Price Quote'), ('general', 'General Question'), ('complaint', 'Complaint')], default='general', max_length=20)),
                ('laptop_brand', models.CharField(blank=True, max_length=50)),
                ('issue_description', models.TextField()),
                ('is_responded', models.BooleanField(default=False)),
                ('response_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes untuk admin')),
            ],
            options={
                'verbose_name': 'Contact Submission',
                'verbose_name_plural': 'Contact Submissions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.TextField()),
                ('answer', ckeditor.fields.RichTextField()),
                ('category', models.CharField(choices=[('general', 'Umum'), ('pricing', 'Harga'), ('warranty', 'Garansi'), ('service', 'Layanan'), ('technical', 'Teknis')], default='general', max_length=20)),
                ('order_priority', models.IntegerField(default=0, help_text='Angka kecil = tampil di atas')),
                ('is_featured', models.BooleanField(default=False, help_text='Tampilkan di homepage?')),
            ],
            options={
                'verbose_name': 'FAQ',
                'verbose_name_plural': 'FAQs',
                'ordering': ['order_priority', 'question'],
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer_name', models.CharField(max_length=100)),
                ('customer_photo', models.ImageField(blank=True, null=True, upload_to='testimonials/')),
                ('laptop_brand', models.CharField(blank=True, max_length=100)),
                ('service_type', models.CharField(blank=True, max_length=100)),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Rating 1-5 bintang')),
                ('review_text', models.TextField()),
                ('is_verified', models.BooleanField(default=False, help_text='Review sudah diverifikasi?')),
                ('is_featured', models.BooleanField(default=False, help_text='Tampilkan di homepage?')),
                ('customer_location', models.CharField(blank=True, help_text='Contoh: Bandung, Dago', max_length=100)),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('content', ckeditor.fields.RichTextField()),
                ('excerpt', models.TextField(blank=True, help_text='Ringkasan singkat untuk preview')),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='content/')),
                ('page_type', models.CharField(choices=[('blog', 'Blog Post'), ('page', 'Static Page'), ('faq', 'FAQ'), ('tutorial', 'Tutorial'), ('news', 'News')], max_length=20)),
                ('target_keyword', models.CharField(blank=True, help_text='Keyword utama untuk SEO', max_length=255)),
                ('secondary_keywords', models.JSONField(blank=True, default=list, help_text='Keywords tambahan (JSON list)')),
                ('meta_title', models.CharField(blank=True, max_length=255)),
                ('meta_description', models.TextField(blank=True)),
                ('is_published', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Tampilkan di homepage?')),
                ('publish_date', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Content Page',
                'verbose_name_plural': 'Content Pages',
                'ordering': ['-publish_date'],
            },
            bases=(models.Model, meta.models.ModelMeta),
        ),
    ]
